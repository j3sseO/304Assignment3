Qubit class works as expected, measure method returns instantly if polarization matches, otherwise it sets value to 0 or 1 with 50/50 chance.

XOR class works as expected, format of the key is validated upon initialisation of the class. The key is extended by repeating itself until it is long enough to XOR side by side with the message being transmitted. keyToLength algorithm can make the key much longer than needed but it still works with no issues. xorMessage algorithm works very well, same method is used to encode and decode the message being transmitted.

Emulation class works with main method as its main entry point. The emulation starts with the user inputting the message that should be transmitted along with the javac command e.g. "javac Emulation 10110111". Bits are then put into an array to remove any spaces in the string. intialTransmit method is called, with its parameter set the the qubit stream length for the QKE algorithm. Qubits are then created and values, polarizations are stored in arrays. Array of Qubits is then used as parameter in initialReceive method call where each value of the Qubits are measured using the measure method by the 'receiver'. The transmitter then transmits the polarization where the key is then determined by which values at each index have the same polarization. Each value is then appended to the key.